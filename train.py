#!/usr/bin/env python3
"""
adapted from https://github.com/tuff96/Malware-detection-using-Machine-Learning
"""

# ==========================================================================
# Train a model using the Random Forest method to classify PE executables as
# malware or otherwise
#
# usage:
#    $ python train.py DATASET.csv
#
#   outputs `model.joblib` and `scaler.joblib`
# ==========================================================================


# Importing the libraries
from joblib import dump, load
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import RobustScaler, StandardScaler
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import sys

if len(sys.argv) < 2:
    print("No dataset provided")
    exit(1)

# Importing the dataset
dataset_file = sys.argv[1]
print('training on "' + dataset_file + '"')
dataset = pd.read_csv(dataset_file, sep='|')
X = dataset.drop(['Name', 'md5', 'legitimate'], axis=1).values
y = dataset['legitimate'].values

X_train = X
y_train = y

# # Splitting the dataset into the Training set and Test set
# X_train, X_test, y_train, y_test = train_test_split(
#     X, y, test_size=0.15, random_state=420)


# Feature Scaling
sc = RobustScaler()
X_train = sc.fit_transform(X_train)
# X_test = sc.transform(X_test)

dump(sc, 'scaler.joblib')

# The classifier model
classifier = RandomForestClassifier(
    n_estimators=50, criterion='entropy', random_state=420)
classifier.fit(X_train, y_train)

dump(classifier, 'model.joblib')

# # predict the test results for split test data. not needed in the final model
# y_pred = classifier.predict(X_test)
# # Makeing the confusion matrix
# cm = confusion_matrix(y_test, y_pred)
# print(cm)
# print('acc', accuracy_score(y_test, y_pred))

